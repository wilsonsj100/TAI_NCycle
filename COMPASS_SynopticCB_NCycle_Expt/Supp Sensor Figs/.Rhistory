First_Timestamp = min(TIMESTAMP),  # Minimum (earliest) timestamp for each Plot_ID
Last_Timestamp = max(TIMESTAMP),   # Maximum (latest) timestamp for each Plot_ID
Total_Time = as.numeric(difftime(max(TIMESTAMP), min(TIMESTAMP), units = "secs")),  # Time difference in seconds
) %>%
ungroup() %>%
mutate(drop = FALSE) %>% # Add a 'drop' column with 'FALSE' for every row
#mutate(notes = " ")  # Add a 'drop' column with 'FALSE' for every row
#mutate(Deadband = 5)
mutate(Notes = "")
# Write df_unique to CSV
write.csv(metadata, file = file_path, row.names = FALSE)
print("CSV file does not exist. It has been created.")
}
#match the altered metadata to the concentration data
alldat$metadat_row <- ffi_metadata_match(
data_timestamps = alldat$TIMESTAMP,
start_dates = metadata$Date,
start_times = metadata$Time_start,
obs_lengths = metadata$Total_Time)
head(alldat)
#alldat$Deadband <- metadata$Deadband[alldat$metadat_row] #flux calcs function cannot handle a column as a deadband and that is a problem tbd
alldat$Plot <- metadata$Plot[alldat$metadat_row]
#change the units
alldat$CH4_nmol <- ffi_ppb_to_nmol(alldat$ch4,
volume = (alldat$TotalVolume / 1000000), # have to divide to get to m3
temp = alldat$chamber_t)    # degrees C
#> Assuming atm = 101325 Pa
#> Using R = 8.31446261815324 m3 Pa K-1 mol-1
alldat$CH4_nmol_m2 <- alldat$CH4_nmol / 0.0318 #adjust for the area
#need to create a new line that would say only calculate the flux if the drop column is false
#calculate fluxes for all other sites
fluxes <- ffi_compute_fluxes(alldat,
group_column = "Plot",
time_column = "TIMESTAMP",
gas_column = "CH4_nmol_m2",
dead_band = 5)
head(fluxes)
allflux <- fluxes
#so first we need to make it so that the fluxes that were retaken have similar names or some way to identify them
# if they were retaken it will either have a letter after it or a retake written
#remove any lines that don't have a site code in the Plot ID
fluxes <-  fluxes %>%
filter(str_detect(Plot, "SWH|MSM|GWI|GCW|GCReW"))
#if they say retake then we want to replace that with an "a" and if it has -A then we also want to remove that and make it "a"
fluxes <- fluxes %>%
mutate(Plot = if_else(str_detect(Plot, "-retake"),
str_replace(Plot, "-retake", "a"),
Plot)) %>%
mutate(Plot = if_else(str_detect(Plot, "-Retake"),
str_replace(Plot, "-Retake", "a"),
Plot)) %>%
mutate(Plot = if_else(str_detect(Plot, "-b"),
str_replace(Plot, "-b", "b"),
Plot)) %>%
mutate(Plot = if_else(str_detect(Plot, "1-May-GCW-TR-3-A"),
str_replace(Plot, "1-May-GCW-TR-3-A", "1-May-GCW-TR-3a"),
Plot))
# Extract the base plot (e.g., "GCW-TR-1" from "GCW-TR-1", "GCW-TR-1a", etc.)
fluxes$base_plot <- str_extract(fluxes$Plot,  "^[^-]+-[A-Za-z]+-[A-Za-z]+-[A-Za-z]+")
# Extract the replicate number (the number after the last hyphen)
fluxes$replicate <- as.numeric(str_extract(fluxes$Plot, "(?<=-)[0-9]+(?=[a-zA-Z]?$)"))
# Extract the suffix (if any, the letter after the replicate number)
fluxes$suffix <- str_extract(fluxes$Plot, "(?<=\\d)[a-zA-Z]$")
# If there's no suffix, set it to an empty string
fluxes$suffix[is.na(fluxes$suffix)] <- ""
#create ID columns from the plots
IDs <- data.frame(do.call('rbind', strsplit(as.character(fluxes$Plot),'-',fixed=TRUE)))
colnames(IDs) <- c("RepNumber", "Month", "Site", "Zone", "Replicate")
head(IDs)
#combine these dataframes together
allflux <- cbind(IDs, fluxes)
# Sort by base plot, replicate number, and suffix (to keep highest suffix)
allflux <- allflux %>%
group_by(base_plot, replicate) %>%
arrange(Month, Site, Zone, replicate, desc(suffix), .by_group = TRUE) %>%
slice_head(n = 1) %>%
ungroup()
#take a look at the fluxes we calculated with R2
ggplot(allflux, aes(Plot, lin_flux.estimate, color = lin_r.squared)) +
geom_point(size=4) + theme_classic() + ylim(-50,5000) +
geom_linerange(aes(ymin = lin_flux.estimate- lin_flux.std.error,
ymax = lin_flux.estimate+ lin_flux.std.error)) +
scale_color_gradientn(colours = c("darkred",  "red", "white","lightblue", "darkblue"),
values = c(0, 0.5, 0.6, 0.7, 1)) +
ylab("CH4 flux (nmol/m2/s)")
#sort fluxes by R2
fluxes_good <- as.data.frame(subset(allflux, lin_r.squared >= .90, select = Plot:TIMESTAMP_max))
fluxes_lowr2 <- as.data.frame(subset(allflux, lin_r.squared < .90 & lin_flux.estimate < 1, select = Plot:TIMESTAMP_max))
fluxes_weird <- as.data.frame(subset(allflux, lin_r.squared < .90 & lin_flux.estimate > 1, select = Plot:TIMESTAMP_max))
#find fluxes that represent the first and fourth quartile of the data
low <- quantile(allflux$lin_flux.estimate, 0.05)
high <- quantile(allflux$lin_flux.estimate, 0.95)
fluxes_low <- as.data.frame(subset(allflux, lin_flux.estimate <= low, select = Plot:TIMESTAMP_max))
fluxes_high <- as.data.frame(subset(allflux, lin_flux.estimate >= high, select = Plot:TIMESTAMP_max))
tails <- rbind(fluxes_low, fluxes_high)
tobechecked <- c("2-Sep-GCW-TR-5", "1-Oct-SWH-SWAMP-3a", "1-Jun-SWH-UP-4", "1-May-SWH-TR-5a",
"2-Nov-SWH-SWAMP-5a")
colnames <- c("Plot")
#Loop to run five random plots subset above
for(P in tobechecked){
r1 <- subset(alldat, Plot == P)
p1 <- ggplot(r1, aes(as.POSIXct(TIMESTAMP), ch4)) + geom_point() +
scale_x_datetime(breaks = "15 sec") +
theme_classic() +
ylab(expression(paste( CH [4], " (ppb)"))) +
xlab("Time") + labs(title = P) +
geom_smooth()
print(p1)
}
#r1 <- subset(alldat, Plot ==  "2-May-GWI-TR-4b")
#p1 <- ggplot(r1, aes(as.POSIXct(TIMESTAMP), ch4)) + geom_point() +
# scale_x_datetime(breaks = "15 sec") +
# theme_classic() +
# ylab(expression(paste( CH [4], " (ppb)"))) +
# xlab("Time") + labs(title = "plot name above") +
#geom_smooth()
#print(p1)
#list of the ones that I changed and checked and looked good?
fixedplots <- c("2-Jul-GWI-UP-3", "2-Aug-SWH-TR-6a", "1-Oct-SWH-TR-9", "1-Sep-SWH-TR-9",
"2-May-GWI-TR-4b", "1-Sep-SWH-UP-2", "2-Oct-SWH-TR-1a", "2-Oct-SWH-UP-2", "2-Nov-SWH-SWAMP-2a",
"2-Oct-GWI-UP-3", "1-Aug-SWH-TR-1", "2-May-SWH-SWAMP-2", "2-Nov-SWH-SWAMP-1", "2-Aug-SWH-TR-1",
"2-Aug-SWH-SWAMP-2", "1-Sep-SWH-TR-8b", "1-Oct-SWH-TR-10", "1-Oct-SWH-SWAMP-1a", "1-Nov-SWH-TR-4a",
"1-Nov-SWH-SWAMP-2a", "1-Nov-SWH-SWAMP-1",  "1-May-SWH-TR-4a", "1-May-SWH-SWAMP-2", "1-May-GCW-TR-4",
"1-Jun-SWH-TR-8b", "2-Jun-SWH-TR-3a", "1-Aug-SWH-TR-8a", "1-Aug-SWH-SWAMP-2", "2-May-GWI-UP-5", "1-Nov-SWH-UP-2",
"2-Aug-SWH-TR-2c")
### pull a random sample of good fluxes to check and plot
good_plots <- unique(fluxes_good$Plot)
# take a random sample (FALSE so we don't get the same plot twice)
# set.seed(...) to guarantee reproducibility
good_sample <- sample(good_plots, 5, replace=FALSE)
#Loop to run five random plots subset above
for(P in good_sample){
r1 <- subset(alldat, Plot == P)
p1 <- ggplot(r1, aes(as.POSIXct(TIMESTAMP), ch4)) + geom_point() +
scale_x_datetime(breaks = "15 sec") +
theme_classic() +
ylab(expression(paste( CH [4], " (ppb)"))) +
xlab("Time") + labs(title = P) +
geom_smooth()
print(p1)
}
####################
### pull out fluxes with R2 < 0.9 and put them in a list
low_plots <- unique(fluxes_lowr2$Plot)
#Loop to run five random plots subset above
for(P in low_plots){
r1 <- subset(alldat, Plot == P)
p1 <- ggplot(r1, aes(TIMESTAMP, ch4)) + geom_point() + theme_classic() +
scale_x_datetime(breaks = "15 sec") +
ylab(expression(paste( CH [4], " (ppb)"))) +
xlab("Time") + labs(title = P) +
geom_smooth()
print(p1)
}
####################
View(fluxes_lowr2)
### pull out fluxes with R2 < 0.9 and put them in a list
bad_plots <- unique(fluxes_weird$Plot)
#Loop to run five random plots subset above
for(P in bad_plots){
r1 <- subset(alldat, Plot == P)
p1 <- ggplot(r1, aes(TIMESTAMP, ch4)) + geom_point() + theme_classic() +
scale_x_datetime(breaks = "15 sec") +
ylab(expression(paste( CH [4], " (ppb)"))) +
xlab("Time") + labs(title = P) +
geom_smooth()
print(p1)
}
####################
### pull out fluxes in the 5% and 95% tails to look at really high and really low
tail_plots <- unique(tails$Plot)
#Loop to run five random plots subset above
for(P in tail_plots){
r1 <- subset(alldat, Plot == P)
p1 <- ggplot(r1, aes(TIMESTAMP, ch4)) + geom_point() + theme_classic() +
scale_x_datetime(breaks = "15 sec") +
ylab(expression(paste( CH [4], " (ppb)"))) +
xlab("Time") + labs(title = P) +
geom_smooth()
print(p1)
}
#would be nice to put on the plot the flux estimate and if it is a high or low or something
####################
knitr::opts_chunk$set(echo = TRUE)
#install.packages("remotes") # if necessary
#remotes::install_github("COMPASS-DOE/fluxfinder")
library(fluxfinder)
library(ggplot2)
library(ggpubr)
library(lubridate)
library(dplyr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(stringr)
setwd("S:/Biogeochemistry/COMPASS Synoptics/Samples & Data/Fluxes/Soil GHG Fluxes/Raw JSON Data Files/2024")
#list all the files in the directory
L <- list.files(path = "S:/Biogeochemistry/COMPASS Synoptics/Samples & Data/Fluxes/Soil GHG Fluxes/Raw JSON Data Files/2024")
head(L)
#create a list of the files there
file.list <- dir(pattern = "json$", full.names = FALSE)
#Read in the data
alldat1 <- lapply(file.list, ffi_read_LIsmartchamber)
#combind into one dataframe
alldat <- data.table::rbindlist(alldat1, fill=TRUE)
############### only run this first part if you don't already have a meta-data file
#because if you do then all the data for each one will have a plot and you won't be able to change start times
#create unique Plot ID for each measurement:
#detach("package:data.table", unload=TRUE)
#alldat$month <- as.character(month(alldat$TIMESTAMP, label=TRUE, abbr=TRUE)) #will not run if you have data.table loaded
#alldat$year <- year(alldat$TIMESTAMP)
#alldat <- alldat %>%
#mutate(Plot = str_c(pmin(month, RepNum),
#pmax(month, RepNum),  sep = '-'))
#alldat <- alldat %>%
#mutate(Plot = str_c(pmin(Plot, label),
#               pmax(Plot, label),  sep = '-'))
# Define the file path where you want to save the CSV file
file_path <- "COMPASS_SmartChamber_Metadata_2024.csv"
# Check if the CSV file exists
if (file.exists(file_path)) {
# If it exists, read it back into R
metadata <- read.csv(file_path)
print("CSV file exists and has been read into the code.")
} else {
# If it does not exist, create the CSV file
#create a metadata file from the Plot IDs
# pull timestart timestamps to put in the metadata and obs lengths
metadata <- alldat %>%
group_by(Plot) %>%
summarise(
Date = format(min(TIMESTAMP), "%Y-%m-%d"),
Time_start = format(min(TIMESTAMP), "%H:%M:%S"),
First_Timestamp = min(TIMESTAMP),  # Minimum (earliest) timestamp for each Plot_ID
Last_Timestamp = max(TIMESTAMP),   # Maximum (latest) timestamp for each Plot_ID
Total_Time = as.numeric(difftime(max(TIMESTAMP), min(TIMESTAMP), units = "secs")),  # Time difference in seconds
) %>%
ungroup() %>%
mutate(drop = FALSE) %>% # Add a 'drop' column with 'FALSE' for every row
#mutate(notes = " ")  # Add a 'drop' column with 'FALSE' for every row
#mutate(Deadband = 5)
mutate(Notes = "")
# Write df_unique to CSV
write.csv(metadata, file = file_path, row.names = FALSE)
print("CSV file does not exist. It has been created.")
}
#match the altered metadata to the concentration data
alldat$metadat_row <- ffi_metadata_match(
data_timestamps = alldat$TIMESTAMP,
start_dates = metadata$Date,
start_times = metadata$Time_start,
obs_lengths = metadata$Total_Time)
head(alldat)
#alldat$Deadband <- metadata$Deadband[alldat$metadat_row] #flux calcs function cannot handle a column as a deadband and that is a problem tbd
alldat$Plot <- metadata$Plot[alldat$metadat_row]
#change the units
alldat$CH4_nmol <- ffi_ppb_to_nmol(alldat$ch4,
volume = (alldat$TotalVolume / 1000000), # have to divide to get to m3
temp = alldat$chamber_t)    # degrees C
#> Assuming atm = 101325 Pa
#> Using R = 8.31446261815324 m3 Pa K-1 mol-1
alldat$CH4_nmol_m2 <- alldat$CH4_nmol / 0.0318 #adjust for the area
#need to create a new line that would say only calculate the flux if the drop column is false
#calculate fluxes for all other sites
fluxes <- ffi_compute_fluxes(alldat,
group_column = "Plot",
time_column = "TIMESTAMP",
gas_column = "CH4_nmol_m2",
dead_band = 5)
head(fluxes)
allflux <- fluxes
#so first we need to make it so that the fluxes that were retaken have similar names or some way to identify them
# if they were retaken it will either have a letter after it or a retake written
#remove any lines that don't have a site code in the Plot ID
fluxes <-  fluxes %>%
filter(str_detect(Plot, "SWH|MSM|GWI|GCW|GCReW"))
#if they say retake then we want to replace that with an "a" and if it has -A then we also want to remove that and make it "a"
fluxes <- fluxes %>%
mutate(Plot = if_else(str_detect(Plot, "-retake"),
str_replace(Plot, "-retake", "a"),
Plot)) %>%
mutate(Plot = if_else(str_detect(Plot, "-Retake"),
str_replace(Plot, "-Retake", "a"),
Plot)) %>%
mutate(Plot = if_else(str_detect(Plot, "-b"),
str_replace(Plot, "-b", "b"),
Plot)) %>%
mutate(Plot = if_else(str_detect(Plot, "1-May-GCW-TR-3-A"),
str_replace(Plot, "1-May-GCW-TR-3-A", "1-May-GCW-TR-3a"),
Plot))
# Extract the base plot (e.g., "GCW-TR-1" from "GCW-TR-1", "GCW-TR-1a", etc.)
fluxes$base_plot <- str_extract(fluxes$Plot,  "^[^-]+-[A-Za-z]+-[A-Za-z]+-[A-Za-z]+")
# Extract the replicate number (the number after the last hyphen)
fluxes$replicate <- as.numeric(str_extract(fluxes$Plot, "(?<=-)[0-9]+(?=[a-zA-Z]?$)"))
# Extract the suffix (if any, the letter after the replicate number)
fluxes$suffix <- str_extract(fluxes$Plot, "(?<=\\d)[a-zA-Z]$")
# If there's no suffix, set it to an empty string
fluxes$suffix[is.na(fluxes$suffix)] <- ""
#create ID columns from the plots
IDs <- data.frame(do.call('rbind', strsplit(as.character(fluxes$Plot),'-',fixed=TRUE)))
colnames(IDs) <- c("RepNumber", "Month", "Site", "Zone", "Replicate")
head(IDs)
#combine these dataframes together
allflux <- cbind(IDs, fluxes)
# Sort by base plot, replicate number, and suffix (to keep highest suffix)
allflux <- allflux %>%
group_by(base_plot, replicate) %>%
arrange(Month, Site, Zone, replicate, desc(suffix), .by_group = TRUE) %>%
slice_head(n = 1) %>%
ungroup()
#take a look at the fluxes we calculated with R2
ggplot(allflux, aes(Plot, lin_flux.estimate, color = lin_r.squared)) +
geom_point(size=4) + theme_classic() + ylim(-50,5000) +
geom_linerange(aes(ymin = lin_flux.estimate- lin_flux.std.error,
ymax = lin_flux.estimate+ lin_flux.std.error)) +
scale_color_gradientn(colours = c("darkred",  "red", "white","lightblue", "darkblue"),
values = c(0, 0.5, 0.6, 0.7, 1)) +
ylab("CH4 flux (nmol/m2/s)")
#sort fluxes by R2
fluxes_good <- as.data.frame(subset(allflux, lin_r.squared >= .90, select = Plot:TIMESTAMP_max))
fluxes_lowr2 <- as.data.frame(subset(allflux, lin_r.squared < .90 & lin_flux.estimate < 1, select = Plot:TIMESTAMP_max))
fluxes_weird <- as.data.frame(subset(allflux, lin_r.squared < .90 & lin_flux.estimate > 1, select = Plot:TIMESTAMP_max))
#find fluxes that represent the first and fourth quartile of the data
low <- quantile(allflux$lin_flux.estimate, 0.05)
high <- quantile(allflux$lin_flux.estimate, 0.95)
fluxes_low <- as.data.frame(subset(allflux, lin_flux.estimate <= low, select = Plot:TIMESTAMP_max))
fluxes_high <- as.data.frame(subset(allflux, lin_flux.estimate >= high, select = Plot:TIMESTAMP_max))
tails <- rbind(fluxes_low, fluxes_high)
tobechecked <- c("2-Sep-GCW-TR-5", "2-Aug-SWH-TR-9a")
colnames <- c("Plot")
#Loop to run five random plots subset above
for(P in tobechecked){
r1 <- subset(alldat, Plot == P)
p1 <- ggplot(r1, aes(as.POSIXct(TIMESTAMP), ch4)) + geom_point() +
scale_x_datetime(breaks = "15 sec") +
theme_classic() +
ylab(expression(paste( CH [4], " (ppb)"))) +
xlab("Time") + labs(title = P) +
geom_smooth()
print(p1)
}
#r1 <- subset(alldat, Plot ==  "2-May-GWI-TR-4b")
#p1 <- ggplot(r1, aes(as.POSIXct(TIMESTAMP), ch4)) + geom_point() +
# scale_x_datetime(breaks = "15 sec") +
# theme_classic() +
# ylab(expression(paste( CH [4], " (ppb)"))) +
# xlab("Time") + labs(title = "plot name above") +
#geom_smooth()
#print(p1)
#list of the ones that I changed and checked and looked good?
fixedplots <- c("2-Jul-GWI-UP-3", "2-Aug-SWH-TR-6a", "1-Oct-SWH-TR-9", "1-Sep-SWH-TR-9",
"2-May-GWI-TR-4b", "1-Sep-SWH-UP-2", "2-Oct-SWH-TR-1a", "2-Oct-SWH-UP-2", "2-Nov-SWH-SWAMP-2a",
"2-Oct-GWI-UP-3", "1-Aug-SWH-TR-1", "2-May-SWH-SWAMP-2", "2-Nov-SWH-SWAMP-1", "2-Aug-SWH-TR-1",
"2-Aug-SWH-SWAMP-2", "1-Sep-SWH-TR-8b", "1-Oct-SWH-TR-10", "1-Oct-SWH-SWAMP-1a", "1-Nov-SWH-TR-4a",
"1-Nov-SWH-SWAMP-2a", "1-Nov-SWH-SWAMP-1",  "1-May-SWH-TR-4a", "1-May-SWH-SWAMP-2", "1-May-GCW-TR-4",
"1-Jun-SWH-TR-8b", "2-Jun-SWH-TR-3a", "1-Aug-SWH-TR-8a", "1-Aug-SWH-SWAMP-2", "2-May-GWI-UP-5", "1-Nov-SWH-UP-2",
"2-Aug-SWH-TR-2c", "1-Oct-SWH-SWAMP-3a", "1-Jun-SWH-UP-4", "1-May-SWH-TR-5a",
"2-Nov-SWH-SWAMP-5a")
### pull out fluxes in the 5% and 95% tails to look at really high and really low
tail_plots <- unique(tails$Plot)
#Loop to run five random plots subset above
for(P in tail_plots){
r1 <- subset(alldat, Plot == P)
p1 <- ggplot(r1, aes(TIMESTAMP, ch4)) + geom_point() + theme_classic() +
scale_x_datetime(breaks = "15 sec") +
ylab(expression(paste( CH [4], " (ppb)"))) +
xlab("Time") + labs(title = P) +
geom_smooth()
print(p1)
}
#would be nice to put on the plot the flux estimate and if it is a high or low or something
####################
### pull out fluxes with R2 < 0.9 and put them in a list
bad_plots <- unique(fluxes_weird$Plot)
#Loop to run five random plots subset above
for(P in bad_plots){
r1 <- subset(alldat, Plot == P)
p1 <- ggplot(r1, aes(TIMESTAMP, ch4)) + geom_point() + theme_classic() +
scale_x_datetime(breaks = "15 sec") +
ylab(expression(paste( CH [4], " (ppb)"))) +
xlab("Time") + labs(title = P) +
geom_smooth()
print(p1)
}
####################
p1 <- ggplot(allflux_filtered, aes(lin_flux.estimate, rob_flux.estimate, color = Plot)) +
geom_point(size=4) + geom_abline() +
theme_classic() +
labs(title = "A") +
ylab(expression(paste( CH [4], " Flux (nmol m"^-2* " s"^-1*") Robust Method"))) +
xlab(expression(paste( CH [4], " Flux (nmol m"^-2* " s"^-1*") Linear Method"))) +
guides(color = guide_legend(title = "Plot")) +
theme(legend.position="none") +
theme(axis.title.x = element_text(size=12), axis.text = element_text(size=12),
axis.title.y = element_text(size=12), legend.text=element_text(size=12),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
aspect.ratio = 1)
# Create a new dataframe by removing rows that were present in fluxes_weird which have a low R2 and a flux higher than 1 (29 obs)
allflux_filtered <- allflux[!(allflux$Plot %in% fluxes_weird$Plot), ]
# View the result
head(allflux_filtered)
p1 <- ggplot(allflux_filtered, aes(lin_flux.estimate, rob_flux.estimate, color = Plot)) +
geom_point(size=4) + geom_abline() +
theme_classic() +
labs(title = "A") +
ylab(expression(paste( CH [4], " Flux (nmol m"^-2* " s"^-1*") Robust Method"))) +
xlab(expression(paste( CH [4], " Flux (nmol m"^-2* " s"^-1*") Linear Method"))) +
guides(color = guide_legend(title = "Plot")) +
theme(legend.position="none") +
theme(axis.title.x = element_text(size=12), axis.text = element_text(size=12),
axis.title.y = element_text(size=12), legend.text=element_text(size=12),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
aspect.ratio = 1)
p1
p2 <- ggplot(allflux_filtered, aes(lin_r.squared, poly_r.squared, color = Plot)) +
geom_point(size=4) + geom_abline() +
theme_classic() +
xlim(0,1) + ylim(0,1) +
labs(title = "B") +
ylab(expression(paste("R"^2* " Second-Order Polynomial"))) +
xlab(expression(paste("R"^2* " Linear Model"))) +
guides(color = guide_legend(title = "Plot")) +
theme(legend.position="none") +
theme(axis.title.x = element_text(size=12), axis.text = element_text(size=12),
axis.title.y = element_text(size=12), legend.text=element_text(size=12),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
aspect.ratio = 1)
p2
p3 <- ggplot(allflux_filtered, aes(lin_flux.estimate, HM81_flux.estimate, color = lin_r.squared )) +
geom_point(size=4) + geom_abline() +
theme_classic() +
#xlim(0,50) + #ylim(0,50) +
labs(title = "C") +
ylab(expression(paste( CH [4], " Flux (nmol m"^-2* " s"^-1*") HM1981 Method"))) +
xlab(expression(paste( CH [4], " Flux (nmol m"^-2* " s"^-1*") Linear Method"))) +
guides(color = guide_legend(title = "Plot")) +
theme(legend.position="right") +
theme(axis.title.x = element_text(size=12), axis.text = element_text(size=12),
axis.title.y = element_text(size=12), legend.text=element_text(size=12),
panel.border = element_rect(colour = "black", fill=NA, linewidth =1),
aspect.ratio = 1)
p3
#ggarrange(p1, p2, p3, ncol=3, nrow=1) #, common.legend = TRUE, legend="none")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("remotes") # if necessary
#remotes::install_github("COMPASS-DOE/fluxfinder")
library(fluxfinder)
library(ggplot2)
library(ggpubr)
library(lubridate)
library(dplyr)
library(tidyr)
setwd("S:/Biogeochemistry/COMPASS Synoptics/Samples & Data/Fluxes/Macrophyte GHG Fluxes/Raw Data Files/2024")
L <- list.files(path = "S:/Biogeochemistry/COMPASS Synoptics/Samples & Data/Fluxes/Macrophyte GHG Fluxes/Raw Data Files/2024")
head(L)
file.list <- dir(pattern = "txt$")
#Read in the data
alldat1 <- lapply(file.list, ffi_read_LI7810)
alldat <- data.table::rbindlist(alldat1, fill=TRUE)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("remotes") # if necessary
#remotes::install_github("COMPASS-DOE/fluxfinder")
library(fluxfinder)
library(ggplot2)
library(ggpubr)
library(lubridate)
library(dplyr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(stringr)
setwd("S:/Biogeochemistry/COMPASS Synoptics/Samples & Data/Fluxes/Soil GHG Fluxes/Raw JSON Data Files/2024")
#list all the files in the directory
L <- list.files(path = "S:/Biogeochemistry/COMPASS Synoptics/Samples & Data/Fluxes/Soil GHG Fluxes/Raw JSON Data Files/2024")
head(L)
#create a list of the files there
file.list <- dir(pattern = "json$", full.names = FALSE)
#Read in the data
alldat1 <- lapply(file.list, ffi_read_LIsmartchamber)
#combind into one dataframe
alldat <- data.table::rbindlist(alldat1, fill=TRUE)
############### only run this first part if you don't already have a meta-data file
#because if you do then all the data for each one will have a plot and you won't be able to change start times
#create unique Plot ID for each measurement:
#detach("package:data.table", unload=TRUE)
#alldat$month <- as.character(month(alldat$TIMESTAMP, label=TRUE, abbr=TRUE)) #will not run if you have data.table loaded
alldat$year <- year(alldat$TIMESTAMP)
alldat <- alldat %>%
mutate(Plot_ID = str_c(pmin(month, RepNum),
pmax(month, RepNum),  sep = '-'))
############### only run this first part if you don't already have a meta-data file
#because if you do then all the data for each one will have a plot and you won't be able to change start times
#create unique Plot ID for each measurement:
#detach("package:data.table", unload=TRUE)
#alldat$month <- as.character(month(alldat$TIMESTAMP, label=TRUE, abbr=TRUE)) #will not run if you have data.table loaded
alldat$year <- year(alldat$TIMESTAMP)
alldat <- alldat %>%
mutate(Plot = str_c(pmin(month, RepNum),
pmax(month, RepNum),  sep = '-'))
View(alldat)
############### only run this first part if you don't already have a meta-data file
#because if you do then all the data for each one will have a plot and you won't be able to change start times
#create unique Plot ID for each measurement:
#detach("package:data.table", unload=TRUE)
alldat$month <- as.character(month(alldat$TIMESTAMP, label=TRUE, abbr=TRUE)) #will not run if you have data.table loaded
alldat$year <- year(alldat$TIMESTAMP)
alldat <- alldat %>%
mutate(Plot_ID = str_c(pmin(month, RepNum),
pmax(month, RepNum),  sep = '-'))
alldat <- alldat %>%
mutate(Plot_ID = str_c(pmin(Plot, label),
pmax(Plot, label),  sep = '-'))
